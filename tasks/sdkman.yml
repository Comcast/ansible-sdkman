---
# tasks for managing SDKMAN!

- name: Configure SDKMAN
  become: yes
  template:
    src: templates/sdkman_config.j2
    dest: '{{ sdkman_dir }}/etc/config'
    owner: '{{ sdkman_user }}'
    group: '{{ sdkman_group }}'

- name: Flush SDK caches (before)
  become: yes
  shell: >-
    . {{ sdkman_dir }}/bin/sdkman-init.sh && sdk flush {{ item }}
  args:
    executable: /bin/bash
  with_items: '{{ sdkman_flush_caches_before }}'
  changed_when: false

- name: Update SDKMAN
  become_user: '{{ sdkman_user }}'
  become: yes
  shell: . {{ sdkman_dir }}/bin/sdkman-init.sh && sdk selfupdate
  args:
    executable: /bin/bash
  register: sdk_selfupdate
  changed_when: sdk_selfupdate.stdout != 'No update available at this time.'
  when: sdkman_update

- name: Install SDK candidates/versions
  become_user: '{{ sdkman_user }}'
  become: yes
  shell: >-
    . {{ sdkman_dir }}/bin/sdkman-init.sh &&
    sdk install {{ item.candidate }} {{ item.version }}
  args:
    executable: /bin/bash
  with_items: '{{ sdkman_install_packages }}'
  register: sdk_install
  changed_when: >-
    not item.candidate + ' ' + item.version + ' is already installed.'
    in sdk_install.stdout

- name: Uninstall SDK candidates/versions
  become_user: '{{ sdkman_user }}'
  become: yes
  shell: >-
    . {{ sdkman_dir }}/bin/sdkman-init.sh &&
    sdk uninstall {{ item.candidate }} {{ item.version }}
  args:
    executable: /bin/bash
  with_items: '{{ sdkman_uninstall_packages }}'
  register: sdk_uninstall
  changed_when: >-
    not item.candidate + ' ' + item.version + ' is not installed.'
    in sdk_uninstall.stdout

- name: Get SDK defaults
  become_user: '{{ sdkman_user }}'
  become: yes
  shell: . {{ sdkman_dir }}/bin/sdkman-init.sh && sdk current {{ item }}
  args:
    executable: /bin/bash
  register: get_sdk_defaults
  changed_when: false
  with_items: >-
    {{ sdkman_install_packages | map(attribute="candidate") | unique | list }}

- name: Set SDK defaults
  become_user: '{{ sdkman_user }}'
  become: yes
  shell: >-
    . {{ sdkman_dir }}/bin/sdkman-init.sh &&
    sdk default {{ item.key }} {{ item.value }}
  args:
    executable: /bin/bash
  with_dict: '{{ sdkman_defaults }}'
  changed_when: >-
    not item.value in
    (get_sdk_defaults.results |
     selectattr('item', 'equalto', item.key) |
     first).stdout

- name: Flush SDK caches (after)
  become_user: '{{ sdkman_user }}'
  become: yes
  shell: . {{ sdkman_dir }}/bin/sdkman-init.sh && sdk flush {{ item }}
  args:
    executable: /bin/bash
  with_items: '{{ sdkman_flush_caches_after }}'
  changed_when: false
